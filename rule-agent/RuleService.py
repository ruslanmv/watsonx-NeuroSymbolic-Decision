#
#    Copyright 2024 IBM Corp.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

import os

class RuleService:
    def __init__(self, server_url: str, userName: str, password: str):
        self.server_url = server_url
        self.userName = userName
        self.password = password
        self.isConnected = False
        # Determine mode based on environment variable
        self.advanced_mode = os.getenv("USE_NEURO_SYMBOLIC", "0") == "1"

    def connect(self):
        """
        Establish a connection to the rule engine.
        """
        # Connection logic would typically go here.
        # For this sample, we simply mark the service as connected.
        self.isConnected = True
        print("Connected to rule engine at", self.server_url)

    def invokeDecisionService(self, rulesetPath: str, decisionInputs: dict) -> dict:
        """
        Invokes the decision service on a provided ruleset with given decision inputs.
        If advanced mode is enabled and a logical form is provided within decisionInputs,
        attempt to process it with the Neuro Symbolic evaluation logic.

        Args:
            rulesetPath (str): The path to the ruleset to be used.
            decisionInputs (dict): A dictionary of decision inputs. May include a key "logical_form".

        Returns:
            dict: The decision output.
        """
        if not self.isConnected:
            self.connect()

        # Check if advanced processing should be applied.
        if self.advanced_mode and "logical_form" in decisionInputs:
            print("Advanced mode active. Processing logical form using Neuro Symbolic evaluation...")
            try:
                output = self.evaluate_logical_form(decisionInputs["logical_form"], rulesetPath, decisionInputs)
                if output is not None:
                    print("Neuro Symbolic evaluation succeeded.")
                    return output
            except Exception as e:
                print("Error during Neuro Symbolic evaluation:", e)
                print("Falling back to traditional rule evaluation.")

        # Fallback to traditional rule evaluation.
        print("Invoking traditional rule evaluation for ruleset:", rulesetPath)
        # In a real-world scenario, this block would interact with the rule engine.
        response = { "result": "Default evaluation result based on traditional rule engine." }
        return response

    def evaluate_logical_form(self, logical_form: str, rulesetPath: str, decisionInputs: dict) -> dict:
        """
        Process the provided logical form using the Neuro Symbolic evaluation routine.
        This is a placeholder for advanced processing logic.
        
        Args:
            logical_form (str): The logical form generated by the Neuro Symbolic pipeline.
            rulesetPath (str): The ruleset context.
            decisionInputs (dict): Additional decision inputs.
        
        Returns:
            dict: The evaluation output.
        """
        print("Evaluating logical form:", logical_form)
        # Example placeholder logic: if the logical form contains 'not', interpret it as a negated condition.
        if "not" in logical_form:
            result = "Corrected: The negated condition is recognized and processed."
        else:
            result = "Validated: Logical form processed successfully."
        return {"result": result}

# ---------------------------------------------------
# Example usage block for testing RuleService functionality.
# ---------------------------------------------------
if __name__ == "__main__":
    # Instantiate RuleService in traditional mode.
    print("=== Traditional Evaluation ===")
    rs = RuleService("http://rules.example.com", "user1", "password1")
    traditional_result = rs.invokeDecisionService("ruleset/path", {"input1": "value1"})
    print("Traditional evaluation result:")
    print(traditional_result)

    # Enable advanced mode via environment variable.
    os.environ["USE_NEURO_SYMBOLIC"] = "1"
    print("\n=== Advanced (Neuro Symbolic) Evaluation ===")
    rs_advanced = RuleService("http://rules.example.com", "user1", "password1")
    advanced_result = rs_advanced.invokeDecisionService("ruleset/path", {"logical_form": "piston_1.CausesFailure(oil_engine_1)", "input1": "value1"})
    print("Advanced evaluation result:")
    print(advanced_result)
